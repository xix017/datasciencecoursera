head(sqldf("select * from iris",drv='SQLite'))
a1s <- sqldf("select * from warpbreaks limit 6",drv='SQLite')
sqldf("select * from data where AGEP < 50 and pwgtp1",drv='SQLite')
a = sqldf("select * from data where AGEP < 50 and pwgtp1",drv='SQLite')
head(a)
str(a)
nrow(a)
ncol(a)
a[1,1:6]
sqldf("select * from data where AGEP < 50 and pwgtp1",drv='SQLite')
a = sqldf("select pwgtp1 from acs where AGEP < 50",drv = "SQLite")
a = sqldf("select pwgtp1 from data where AGEP < 50",drv = "SQLite")
nrow(a)
ncol(a)
acs = data
b = sqldf("select distinct AGEP from acs")
b = sqldf("select distinct AGEP from acs",drv="SQLite")
nrow(b)
ncol(b)
head(b)
c = sqldf("select AGEP where unique from acs",drv="SQLite")
d = sqldf("select unique * from acs",drv="SQLite")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
h = readLines(con)
library(httr)
h2 = GET(url)
h2 = GET(con)
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
require(RCurl)
require(XML)
webpage <- getURL("http://biostat.jhsph.edu/~jleek/contact.html")
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
re = readLines('http://biostat.jhsph.edu/~jleek/contact.html')
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
library(XML)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url,useInternalNodes = T)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlcode=readLines(con)
h = htmlcode
nrow(h)
ncol(h)
close(con)
ncol(htmlcode)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAJ&hl=en")
h=readLines(con)
close(con)
h
library(httr)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
h = GET(url)
c = content(h,as="text")
str(c)
ncol(c)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",destfil="./data/test.csv",method="curl")
list.files("./data")
a=read.table(file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",header = TRUE)
c = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
h = readLines(c)
close(c)
dim(h)
require("RCurl")
a = read.table(textConnection(getURL("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",usepwd="user:pass")),sep=" ",header=TRUE)
setwd("M:/Min/study/data science/Reproducible Reports/Project1")
url <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
file <- basename(url)
download.file(url, file)
unzip(file, exdir = "M:/Min/study/data science/Reproducible Reports/Project1" )
data = read.csv("activity.csv")
setwd("M:/Min/study/data science/Reproducible Reports/Project1")
url <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
file <- basename(url)
download.file(url, file)
unzip(file, exdir = "M:/Min/study/data science/Reproducible Reports/Project1" )
data = read.csv("activity.csv")
which(max(AverSteps))
which(max(AveSteps))
head(data)
AveSteps = rep(0,NumOfInterval)
for(i in 1:NumOfInterval)
{
targetInterval = levels(newdata$Interval)[i]
SubNewData = subset(newdata,newdata$Interval == targetInterval)
AveSteps[i] = mean(SubNewData$steps)
}
plot(levels(newdata$Interval),AveSteps,type = "l",
xlab = "5-min Interval",ylab="average number of steps",
main = "Time series plot of averaged steps on 5-min intervals")
which(max(AveSteps))
newdata$Interval = as.factor(newdata$interval)
NumOfInterval = length(levels(newdata$Interval))
AveSteps = rep(0,NumOfInterval)
for(i in 1:NumOfInterval)
{
targetInterval = levels(newdata$Interval)[i]
SubNewData = subset(newdata,newdata$Interval == targetInterval)
AveSteps[i] = mean(SubNewData$steps)
}
plot(levels(newdata$Interval),AveSteps,type = "l",
xlab = "5-min Interval",ylab="average number of steps",
main = "Time series plot of averaged steps on 5-min intervals")
which(max(AveSteps))
newdata = na.omit(data)
NumOfDate = length(levels(newdata$date))
TotalSteps = rep(0,NumOfDate)
for(i in 1:NumOfDate)
{
Date = levels(newdata$date)[i]
SubNewData = subset(newdata,newdata$date==Date)
TotalSteps[i] = sum(SubNewData$steps)
}
newdata$Interval = as.factor(newdata$interval)
NumOfInterval = length(levels(newdata$Interval))
AveSteps = rep(0,NumOfInterval)
for(i in 1:NumOfInterval)
{
targetInterval = levels(newdata$Interval)[i]
SubNewData = subset(newdata,newdata$Interval == targetInterval)
AveSteps[i] = mean(SubNewData$steps)
}
plot(levels(newdata$Interval),AveSteps,type = "l",
xlab = "5-min Interval",ylab="average number of steps",
main = "Time series plot of averaged steps on 5-min intervals")
which(max(AveSteps))
which(AveSteps==max(AveSteps))
levels(newdata$Interval)[which(AveSteps==max(AveSteps))]
nrow(data)-nrow(newdata)
?knnImputation
library("DMwR")
install.packages("DMwR")
library(DMwR)
?knnImputation
clean.data = knnImputation(data)
NumOfDate2 = length(levels(clean.data$date))
TotalSteps2 = rep(0,NumOfDate2)
for(i in 1:NumOfDate2)
{
Date = levels(clean.data$date)[i]
SubNewData = subset(clean.data,clean.data$date==Date)
TotalSteps2[i] = sum(SubNewData$steps)
}
hist(TotalSteps2,breaks = 10,main="histogram of total steps each day on new dataset")
abline(v=c(mean(TotalSteps2),median(TotalSteps2)),col=2:3)
legend("topright",c("mean","median"),col=2:3,lty=1)
c(mean(TotalSteps2),median(TotalSteps2))
histdata = data.frame(c(TotalSteps,TotalSteps2),
c(rep("Original",length(TotalSteps)),
rep("New",length(TotalSteps2))),
colnames=c("TotalSteps","Dataset"))
library(ggplot2)
qplot(TotalSteps, data	=	histdata,	fill=Dataset)
histdata = data.frame(c(TotalSteps,TotalSteps2),
c(rep("Original",length(TotalSteps)),
rep("New",length(TotalSteps2))),
colnames=c("totalstep","dataset"))
head(histdata)
str(histdata)
b = rbind(TotalSteps,TotalSteps2)
str(b)
head(b)
c(1:10,3,4,5)
d=c(1:10,2,3)
str(D)
str(d)
d
totalstep=c(otalSteps,TotalSteps2)
totalstep=c(TotalSteps,TotalSteps2)
str(totalstep)
length(TotalSteps)
length(TotalSteps2)
head(TotalSteps)
head(TotalSteps2)
NumOfDate2 = length(levels(clean.data$date))
NumOfDate
head(levels(clean.data$date))
head(levels(newdata$date))
head(newdata)
dataset=c(rep("Original",length(TotalSteps)),rep("New",length(TotalSteps2)))
str(dataset)
nrow(histdata)
ncol(histdata)
hist[1,3]
histdata[1,3]
histdata = data.frame(c(TotalSteps,TotalSteps2),
c(rep("Original",length(TotalSteps)),
rep("New",length(TotalSteps2))))
head(histdata)
str(histdata)
histdata[1,]
colnames(histdata)=c("totalstep","dataset")
head(histdata)
qplot(totalstep, data	=	histdata,	fill=dataset)
plot(TotalStep,TotalStep2)
plot(TotalSteps,TotalSteps2)
qplot(totalstep, data	=	histdata,	fill=dataset)
x=c(1,1,1,0,0,0)
y=c(1,1,3,1,1,3)
d = data.frame(x,y)
colnames(d)=c("x","y")
qplot(y,data=d,fill=x)
d
qplot(y,data=d,fill=x)
d$x=as.factor(x)
qplot(y,data=d,fill=x)
qplot(totalstep, data    =	histdata,	fill=dataset)
Mean = c(mean(TotalSteps),mean(TotalSteps2))
Median = c(median(ToTalSteps),median(TotalSteps2))
Mean
Median
Mean = c(mean(TotalSteps),mean(TotalSteps2))
Median = c(median(TotalSteps),median(TotalSteps2))
Mean
Median
Mean = c(mean(TotalSteps),mean(TotalSteps2))
Median = c(median(TotalSteps),median(TotalSteps2))
Compare = data.frame(Mean,Median)
colnames(Compare) = c("Mean","Median")
rownames(Compare) = c("OriginalSet","CleanSet")
Compare
?weekday()
?weekdays()
a = weekdays(clean.data$date)
?as.date
a = as.Date(clean.data$date)
b = weekdays(a)
length(a)
length(b)
head(a)
a = levels(clean.data$date)
length(a)
str(clean.data$date)
str(clean.data\)
str(clean.data)
a = as.Date(a)
str(a)
b = weekdays(a)
str(b)
table(b)
head(b)
b[1:10]
colnames(a)
names(a)
names(b)
weekday = b[1:5]
weekday
weekend= b[6:7]
weekend
match(weekday,b)
a = 3
b = c(3,2,3)
match(a,b)
which(b==1)
which(b==a)
b = weekdays(a)
a = levels(clean.data$date)
a = as.Date(a)
b = weekdays(b)
b = weekdays(a)
head(a)
head(b)
b[1:8]
weekday
weekend
which(b==weekday)
k1 = which(b==weekend[1])
k2 = which(b==weekend[2])
k = c(k1,k2)
k
awk = a[k]
awk
awd = a[-awk]
awd = a[-k]
awd
cd = clean.data
cd$dt = as.date(cd$date)
cd$dt = as.Date(cd$date)
head(cd)
cd$dt = weekdays(as.Date(cd$date))
head(cd)
cd[2500,]
kkk = c(1,2,3,4,5)
which(kkk==1 or 3)
which(kkk==1) or which(kkk ==3)
which(kkk==1&&3)
which(kkk==1|3)
which(kkk==1|kkk==3)
cd$dt[which(cd$dt=="Saturday"|cd$dt=="Sunday")] = "Weekend"
length(which(cd$dt!="Saturday"|cd$dt!="Sunday"))
length(which(cd$dt!="Saturday"&&cd$dt!="Sunday"))
cd$dt = weekdays(as.Date(cd$date))
head(cd)
kkk[which(kkk==1|kkk==3)]
kkk[which(kkk==1&&kkk==3)]
kkk[-which(kkk==1|kkk==3)]
cd2 = cd[,-1]
head(cd2)
cd2 = cd[,-"dt"]
cd = clean.data
clean.data$tempd = weekdays(as.Date(clean.data$date))
clean.data$type = clean.data$tempd
clean.data$type[which(clean.data$tempd=="Saturday"|
clean.data$tempd=="Sunday")] = "Weekend"
clean.data$type[-which(clean.data$tempd=="Saturday"|
clean.data$tempd=="Sunday")] = "Weekday"
clean.data = clean.data[,-4]
head(clean.data)
clean.data[2600,]
a = weekdays(as.Date(clean.data$date))
a
head(a)
a[1:2355]
head(clean.data)
match("Weekend",clean.data$type)
clean.data[1441,]
clean.data[2355,]
clean.data[2305,]
clean.data[282,]
clean.data[283,]
clean.data[284,]
clean.data[300,]
clean.data[289,]
289+289
clean.data[578,]
clean.data[578+289,]
clean.data[578+289+289,]
clean.data[578+289+289+289,]
clean.data[578+289+289+289+289,]
clean.data[289,]
clean.data[288+289,]
288+289
clean.data[577+288,]
577+288
clean.data[865+288,]
865+288
clean.data[1153+288,]
1153+288
1153+288+288
clean.data[c(1,289,577,865,1153,1441,1729),]
plot(levels(newdata$Interval),AveSteps,type = "l",
xlab = "5-min Interval",ylab="average number of steps",
main = "Time series plot of averaged steps on 5-min intervals")
nlevels(newdata$interval)
length(levels(newdata$interval))
nlevels(newdata$Interval)
clean.data$Interval = as.factor(clean.data$interval)
NumOfInterval2 = length(levels(clean.data$Interval))
AveSteps2 = rep(0,NumOfInterval2)
for(i in 1:NumOfInterval2)
{
targetInterval2 = levels(clean.data$Interval)[i]
SubNewData2 = subset(clean.data,clean.data$Interval == targetInterval2)
AveSteps2[i] = mean(SubNewData2$steps)
}
xyplot(AveSteps ~ levels(Interval) | type, data = clean.data, layout = c(2, 1),type = "l")
xyplot(AveSteps2 ~ levels(Interval) | type, data = clean.data, layout = c(2, 1),type = "l")
length(AveSteps2)
head(clean.data)
clean.data = clean.data[,-5]
weekdayset = clean.data[which(clean.data=="Weekday"),]
weekendset = clean.data[which(clean.data=="Weekend"),]
row(weekdayset)
nrow(weekdayset)
nrow(weekendset)
nrow(clean.data)
12960+4608
interval = levels(as.factor(clean.data$interval))
length(interval)
head(interval)
Ave = function(ds){
ds$Interval = as.factor(ds$interval)
NumOfInterval = length(levels(ds$Interval))
AveSteps = rep(0,NumOfInterval)
for(i in 1:NumOfInterval)
{
targetInterval = levels(ds$Interval)[i]
SubNewData = subset(ds,ds$Interval == targetInterval)
AveSteps[i] = mean(SubNewData$steps)
}
return(AveSteps)
}
ave1 = Ave(weekdayset)
ave2 = Ave(weekendset)
interval = levels(as.factor(clean.data$interval))
set1 = data.frame(ave1,interval,rep("weekday",length(ave1)))
set2 = data.frame(ave2,interval,rep("weekend",length(ave2)))
colnames(set1) = c("averagedStep","interval","type")
colnames(set2) = c("averagedStep","interval","type")
head(set)
head(set1)
head(ave1)
str(ave1)
length(ave1)
Ave = function(ds){
ds$Interval = as.factor(ds$interval)
NumOfInterval = length(levels(ds$Interval))
AveSteps = rep(0,NumOfInterval)
for(i in 1:NumOfInterval)
{
targetInterval = levels(ds$Interval)[i]
AveSteps[i] = mean(ds$steps[which(ds$Interval == targetInterval)])
}
return(AveSteps)
}
ave1 = Ave(weekdayset)
head(ave1)
Ave = function(ds){
ds$Interval = as.factor(clean.data$interval)
NumOfInterval = length(levels(ds$Interval))
AveSteps = rep(0,NumOfInterval)
for(i in 1:NumOfInterval)
{
targetInterval = levels(ds$Interval)[i]
AveSteps[i] = mean(ds$steps[which(ds$Interval == targetInterval)])
}
return(AveSteps)
}
ave1 = Ave(weekdayset)
str(weekdayset)
head(weekdayset)
weekdayset = clean.data[which(clean.data=="Weekday"),]
weekendset = clean.data[which(clean.data=="Weekend"),]
head(weekdayset)
head(clean.data)
weekdayset = clean.data[which(clean.data$type=="Weekday"),]
weekendset = clean.data[which(clean.data$type=="Weekend"),]
str(weekdayset)
str(weekendset)
Ave = function(ds){
ds$Interval = as.factor(ds$interval)
NumOfInterval = length(levels(ds$Interval))
AveSteps = rep(0,NumOfInterval)
for(i in 1:NumOfInterval)
{
targetInterval = levels(ds$Interval)[i]
AveSteps[i] = mean(ds$steps[which(ds$Interval == targetInterval)])
}
return(AveSteps)
}
ave1 = Ave(weekdayset)
str(ave1)
ave2 = Ave(weekendset)
str(ave2)
interval = levels(as.factor(clean.data$interval))
set1 = data.frame(ave1,interval,rep("weekday",length(ave1)))
set2 = data.frame(ave2,interval,rep("weekend",length(ave2)))
head(set1)
head(set2)
colnames(set1) = c("averagedStep","interval","type")
colnames(set2) = c("averagedStep","interval","type")
head(set1)
head(set2)
Set = merge(set1,set2,by="interval")
head(Set)
?merge
Set = merge(set1,set2,by="interval",all=FALSE)
head(Set)
Set = merge(set1,set2,by.y="interval",all=FALSE)
Set = merge(set1,set2,by.y="interval")
Set = merge(set1,set2,by.x="interval",all=False)
Set = merge(set1,set2,by.x="interval",all=FALSE)
Set = merge(set1,set2,by="interval",all=FALSE)
head(Set)
set = data.frame(c(ave1,ave2),interval,
c(rep("weekday",length(ave1)),rep("weekday",length(ave2)))
colnames(set) = c("averagedStep","interval","type")
set = data.frame(c(ave1,ave2),interval,
c(rep("weekday",length(ave1)),rep("weekday",length(ave2))))
colnames(set) = c("averagedStep","interval","type")
head(set)
xyplot(averagedStep ~ levels(interval) | type, data = set, layout = c(2, 1),type = "l")
set = data.frame(c(ave1,ave2),interval,
c(rep("weekday",length(ave1)),rep("weekend",length(ave2))))
colnames(set) = c("averagedStep","interval","type")
xyplot(averagedStep ~ levels(interval) | type, data = set, layout = c(2, 1),type = "l")
xyplot(averagedStep ~ levels(interval) | type, data = set, layout = c(2,2),type = "l")
head(ave2)
ave2
xyplot(averagedStep ~ levels(interval) | type, data = set, layout = c(2,2))
head(interval)
xyplot(averagedStep ~ interval | type, data = set, layout = c(2,2))
xyplot(averagedStep ~ interval | type, data = set, layout = c(2,1),type = "l")
xyplot(averagedStep ~ interval | type, data = set, type = "l", layout = c(1,2))
?xyplot
a = 1
str(a)
xyplot(averagedStep ~ interval | type, data = set, lty = 1, layout = c(1,2))
xyplot(averagedStep ~ interval | type, data = set,tyep="l",layout = c(1,2))
xyplot(averagedStep ~ interval | type, data = set,tyep="l",layout = c(1,2))
xyplot(averagedStep ~ interval | type, data = set,type="l",layout = c(1,2))
xyplot(averagedStep ~ interval | type, data = set,layout = c(1,2))
xyplot(ts(averagedStep)~ interval | type, data = set,layout = c(1,2))
xyplot(ts(averagedStep)~ interval | type, data = set,type = "l",layout = c(1,2))
?xyplot
plot(interval,ave1,type="l")
str(set$type)
set[set$interval=='0',]
xyplot(averagedStep~interval|type,data = set,tyep="l",layout = c(1,2))
xyplot(averagedStep~interval|type,data = set,type="l",layout = c(1,2))
str(set$interval)
interval = as.numeric(levels(as.factor(clean.data$interval)))
set = data.frame(c(ave1,ave2),interval,
c(rep("weekday",length(ave1)),rep("weekend",length(ave2))))
colnames(set) = c("averagedStep","interval","type")
xyplot(averagedStep~interval|type,data = set,type="l",layout = c(1,2))
xyplot(averagedStep~interval|type,data = set,type="l",layout = c(1,2),
xlab = "interval",ylab="number of steps")
Peer Assignment 1
